type Metadata = record {
  fee : nat64;
  decimals : nat8;
  fee_to : principal;
  owner : principal;
  logo : text;
  name : text;
  total_supply : nat64;
  symbol : text;
};
type OpRecord = record {
  op : Operation;
  to : principal;
  fee : nat64;
  from : principal;
  timestamp : nat64;
  caller : opt principal;
  index : nat64;
  amount : nat64;
};
type Operation = variant { Approve; Mint; Transfer; TransferFrom };
type Result = variant { Ok : nat64; Err : TxError };
type TokenInfo = record {
  deploy_time : nat64;
  holder_number : nat64;
  fee_to : principal;
  history_size : nat64;
  metadata : Metadata;
  cycles : nat64;
};
type TxError = variant { InsufficientAllowance; InsufficientBalance };
service : (text, text, text, nat8, nat64, principal, nat64) -> {
  allowance : (principal, principal) -> (nat64) query;
  approve : (principal, nat64) -> (Result);
  balanceOf : (principal) -> (nat64) query;
  decimals : () -> (nat8) query;
  getAllowanceSize : () -> (nat64) query;
  getHolders : (nat64, nat64) -> (vec record { principal; nat64 }) query;
  getLogo : () -> (text) query;
  getMetadta : () -> (Metadata) query;
  getTokenInfo : () -> (TokenInfo) query;
  getTransaction : (nat64) -> (OpRecord) query;
  getTransactions : (nat64, nat64) -> (vec OpRecord) query;
  getUserApprovals : (principal) -> (vec record { principal; nat64 }) query;
  getUserTransactionAmount : (principal) -> (nat64) query;
  getUserTransactions : (principal, nat64, nat64) -> (vec OpRecord) query;
  historySize : () -> (nat64) query;
  name : () -> (text) query;
  owner : () -> (principal) query;
  setFee : (nat64) -> ();
  setFeeTo : (principal) -> ();
  setLogo : (text) -> ();
  setOwner : (principal) -> ();
  symbol : () -> (text) query;
  totalSupply : () -> (nat64) query;
  transfer : (principal, nat64) -> (Result);
  transferFrom : (principal, principal, nat64) -> (Result);
}